dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
type = "proportional",
iterations = 5)
prop_overlaps
mcp_overlaps <- rarefact_space_overlap(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
type = "mcp", iterations = 5)
mcp_overlaps
mcp_overlaps <- rarefact_space_overlap(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
iterations = 5)
mcp_overlaps
prop_overlaps <- rarefact_space_size_difference(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
type = "proportional",
iterations = 5)
source("~/Dropbox/R_package_testing/PhenotypeSpace/R/space_size.R")
FUN <- "space_size"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
#remove images and sound files
rm.sf()
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
data("example_space")
# plot data
xs <- tapply(example_space$Dimension_1, example_space$ID, mean)
ys <- tapply(example_space$Dimension_2, example_space$ID, mean)
plot(example_space[, c("Dimension_1", "Dimension_2")], col = example_space$color, pch = 20, cex = 1.8)
text(xs, ys, labels = names(xs), cex = 2.5)
space_size(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
type = "mcp"
)
source("~/Dropbox/R_package_testing/PhenotypeSpace/R/space_size.R")
space_size(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
type = "mcp"
)
space_size(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
type = "mcp", proportional = T
)
space_size(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID")
space_size(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
type = "mst")
source("~/Dropbox/R_package_testing/PhenotypeSpace/R/space_size_difference.R")
prop_overlaps <- space_size_difference(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
type = "proportional",
iterations = 5)
prop_overlaps <- space_size_difference(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
type = "mcp",
iterations = 5)
prop_overlaps
#' @param ...
#' @return
#' @export
#' @name space_size_difference
#' @details
#' @examples {
#' # load data
#' data("example_space")
#'
#' # get proportion of space that overlaps (try with more iterations on your own data)
mcp_size <- space_size_difference(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
type = "mcp",
iterations = 5)
#'
#' # get minimum convex polygon overlap for each group (non-symmetric)
#' mcp_overlaps <- space_size_difference(
#' X = example_space,
#' dimensions =  c("Dimension_1", "Dimension_2"),
#' group = "ID",
#' iterations = 5)
#'
#' # convert to non-symmetric triangular matrix
#' rectangular_to_triangular(mcp_overlaps, symmetric = FALSE)
#' }
#' @seealso \code{\link{space_size}}, \code{\link{space_overlap}}, \code{\link{rarefact_space_size_difference}}
#' @author Marcelo Araya-Salas \email{marcelo.araya@@ucr.ac.cr})
#'
#' @references {
#' Araya-Salas, M, & K. Odom. 2022, PhenotypeSpace: quantifying phenotypic trait spaces. R package version 0.1.0.
#' }
# last modification on jan-2022 (MAS)
space_size_difference <- function(X, dimensions, group, parallel = 1, type = "mcp", pb = TRUE, outliers = 0.95, proportional = FALSE, ...){
group_combs <- t(utils::combn(unique(X[, group]), 2))
propspace_size_diff_list <- lapply(1:nrow(group_combs), function(x){
W <- X[X[, group] == group_combs[x, 1], ]
Z <- X[X[, group] == group_combs[x, 2], ]
# combined both
both <- rbind(W, Z)
both[, group] <- as.character(both[, group])
both[, group] <- "both"
Y <- rbind(W, Z, both)
sizes <- space_size(X = Y, dimensions = dimensions, group = group,  parallel = 1, type = type, pb = FALSE, outliers = outliers, proportional = proportional)
size.diff <- sizes$size[sizes$group == group_combs[x, 1]] - sizes$size[sizes$group == group_combs[x, 2]]
out <- data.frame(group.1 = group_combs[x, 1], group.2 = group_combs[x, 2], size.difference = size.diff)
return(out)
})
result <- do.call(rbind, propspace_size_diff_list)
return(result)
}
mcp_size <- space_size_difference(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
type = "mst",
iterations = 5)
mcp_size
source("~/Dropbox/R_package_testing/PhenotypeSpace/R/rarefact_space_size_difference.R")
FUN <- "rarefact_space_size"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
#remove images and sound files
rm.sf()
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
data("example_space")
# plot data
xs <- tapply(example_space$Dimension_1, example_space$ID, mean)
ys <- tapply(example_space$Dimension_2, example_space$ID, mean)
plot(example_space[, c("Dimension_1", "Dimension_2")], col = example_space$color, pch = 20, cex = 1.8)
text(xs, ys, labels = names(xs), cex = 2.5)
# mcp
space_size(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
type = "mcp",
parallel = 1
)
# rarefacted
rarefact_space_size(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
type = "mcp",
parallel = 1
)
# mst
space_size(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
type = "mst"
)
# mst rarefacted
rarefact_space_size(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
type = "mst",
parallel = 1
)
# mst rarefacted parallel proportional
rarefact_space_size(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
type = "mst",
parallel = 3,
proportional = TRUE
)
# mst rarefacted parallel proportional
rarefact_space_size(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
type = "mst",
parallel = 3,
proportional = TRUE,
min.n = 2
)
# mst
space_size(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
type = "kernel"
)
# mst
space_size(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
type = "density"
)
# mst rarefacted
rarefact_space_size(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
type = "density",
parallel = 1
)
source("~/Dropbox/R_package_testing/PhenotypeSpace/R/rarefact_space_size.R")
source("~/Dropbox/R_package_testing/PhenotypeSpace/R/rarefact_space_size.R")
# mst rarefacted
rarefact_space_size(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
type = "mst",
parallel = 1
)
FUN <- "rarefact_space_size_difference"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
#remove images and sound files
rm.sf()
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
data("example_space")
# plot data
xs <- tapply(example_space$Dimension_1, example_space$ID, mean)
ys <- tapply(example_space$Dimension_2, example_space$ID, mean)
plot(example_space[, c("Dimension_1", "Dimension_2")], col = example_space$color, pch = 20, cex = 1.8)
text(xs, ys, labels = names(xs), cex = 2.5)
space_size_difference(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
type = "mcp"
)
rarefact_space_size_difference(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
type = "mcp"
)
space_size_difference(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID")
rarefact_space_size_difference(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID")
rarefact_space_size_difference(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
iterations = 5)
mcp_size_diff <- rarefact_space_size_difference(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
type = "mcp",
iterations = 5)
#'
#' # get rarefied size difference using MCP (try with more iterations on your own data)
#' mcp_size_diff <- rarefact_space_size_difference(
#' X = example_space,
#' dimensions =  c("Dimension_1", "Dimension_2"),
#' group = "ID",
#' type = "mcp",
#' iterations = 5)
#'
#' # convert to non-symmetric triangular matrix
rectangular_to_triangular(mcp_size_diff, symmetric = FALSE)
#' }
#' @seealso \code{\link{rarefact_space_overlap}}, \code{\link{space_size_difference}}
#' @author Marcelo Araya-Salas \email{marcelo.araya@@ucr.ac.cr})
#'
#' @references {
#' Araya-Salas, M, & K. Odom. 2022, PhenotypeSpace: quantifying phenotypic trait spaces. R package version 0.1.0.
#' }
# last modification on jan-2022 (MAS)
rarefact_space_size_difference <- function(X, dimensions, group, iterations = 30, min.n = NULL, replace = FALSE, seed = NULL, parallel = 1, pb = TRUE, ...){
obs.min.n <- min(table(X[, group]))
if (!is.null(min.n)) {
if (obs.min.n < min.n) {
if (replace) message("'min.n' higher than the minimum sample size for at least 1 group, running rarefaction with replacement (replace = TRUE)")
replace <- TRUE
}
} else
min.n <- obs.min.n
X$...rownames <-  1:nrow(X)
# run iterations
space_size_diffs_list <- warbleR:::pblapply_wrblr_int(1:iterations, cl = parallel, pb = pb, function(e){
if (!is.null(seed))
set.seed(seed + e)
raref_indices <- unlist(lapply(unique(X[, group]), function(x)
sample(X$...rownames[X[, group] == x], min.n, replace = replace)
))
size_diffs <- space_size_difference(X[raref_indices, ], group = group, dimensions = dimensions, pb = FALSE, output = "rectangular", parallel = 1, ...)
return(size_diffs)
})
space_size_diffs_mat <- do.call(cbind, lapply(space_size_diffs_list, '[', -c(1, 2)))
results <- space_size_diffs_list[[1]][, 1:2]
results$mean.difference <- rowMeans(space_size_diffs_mat)
results$min.difference <- apply(X = space_size_diffs_mat, MARGIN = 1, FUN = min)
results$max.difference <- apply(X = space_size_diffs_mat, MARGIN = 1, FUN = max)
results$sd.difference <- apply(X = space_size_diffs_mat, MARGIN = 1, FUN = stats::sd)
return(results)
}
rectangular_to_triangular(mcp_size_diff, symmetric = FALSE)
# devtools::install()
x <- c("devtools", "pbapply", "pkgdown","adehabitatHR", "sp", "spatstat", "raster", "rgeos", "MASS", "warbleR", "emstreeR")
aa <- lapply(x, function(y){
if(!y %in% installed.packages()[,"Package"])  {if(y != "warbleR") install.packages(y) else devtools::install_github("maRce10/warbleR")
}
try(require(y, character.only = T), silent = T)
})
rm(list = ls())
load_all()
load("./data/example_space.rda")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./PhenotypeSpace/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/PhenotypeSpace/PhenotypeSpace", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./PhenotypeSpace/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/PhenotypeSpace/PhenotypeSpace", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./PhenotypeSpace/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/PhenotypeSpace/PhenotypeSpace", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./PhenotypeSpace/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/PhenotypeSpace/PhenotypeSpace", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./PhenotypeSpace/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/PhenotypeSpace/PhenotypeSpace", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
source("~/Dropbox/R_package_testing/PhenotypeSpace/R/space_overlap.R")
source("~/Dropbox/R_package_testing/PhenotypeSpace/R/rarefact_space_size.R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./PhenotypeSpace/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/PhenotypeSpace/PhenotypeSpace", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./PhenotypeSpace/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/PhenotypeSpace/PhenotypeSpace", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
library(vegan  )
data(dune)
dis <- vegdist(dune)
tr <- spantree(dis)
tr
sum(tr$dist)
plot(tr, cmdscale(dis), type = "t")\
plot(tr, cmdscale(dis), type = "t")
vegdist(dune)
dune
source("~/Dropbox/R_package_testing/PhenotypeSpace/R/space_size.R")
FUN <- "space_size"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
#remove images and sound files
rm.sf()
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
data("example_space")
# plot data
xs <- tapply(example_space$Dimension_1, example_space$ID, mean)
ys <- tapply(example_space$Dimension_2, example_space$ID, mean)
plot(example_space[, c("Dimension_1", "Dimension_2")], col = example_space$color, pch = 20, cex = 1.8)
text(xs, ys, labels = names(xs), cex = 2.5)
space_size(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
type = "mcp"
)
space_size(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
type = "mst"
)
source("~/Dropbox/R_package_testing/PhenotypeSpace/R/space_size.R")
space_size(
X = example_space,
dimensions =  c("Dimension_1", "Dimension_2"),
group = "ID",
type = "mst"
)
