# retunr as distance matrix
return(as.dist(mat))
}
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./PhenotypeSpace/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/PhenotypeSpace/PhenotypeSpace", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./PhenotypeSpace/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/PhenotypeSpace/PhenotypeSpace", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./PhenotypeSpace/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/PhenotypeSpace/PhenotypeSpace", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./PhenotypeSpace/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/PhenotypeSpace/PhenotypeSpace", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
cols <- viridis(10)
plot(1:10, rep(1, 10), pch = 20, cex = 4, cols = cols)
plot(1:10, rep(1, 10), pch = 20, cex = 4, col = cols)
plot(1:10, rep(1, 10), pch = 20, cex = 10, col = cols)
cols <- viridis::inferno(10)
plot(1:10, rep(1, 10), pch = 20, cex = 10, col = cols)
cols <- heatmap(10)
cols <- heat.colors(10)
plot(1:10, rep(1, 10), pch = 20, cex = 10, col = cols)
x <- y <- seq(-8*pi, 8*pi, len = 40)
r <- sqrt(outer(x^2, y^2, "+"))
filled.contour(cos(r^2)*exp(-r/(2*pi)),
axes=FALSE,
color.palette=viridis,
asp=1)
filled.contour(cos(r^2)*exp(-r/(2*pi)),
axes=FALSE,
color.palette=viridis::cividis,
asp=1)
filled.contour(cos(r^2)*exp(-r/(2*pi)),
axes=FALSE,
color.palette=viridis::inferno,
asp=1)
filled.contour(cos(r^2)*exp(-r/(2*pi)),
axes=FALSE,
color.palette=viridis::magma,
asp=1)
filled.contour(cos(r^2)*exp(-r/(2*pi)),
axes=FALSE,
color.palette=viridis::mako),
filled.contour(cos(r^2)*exp(-r/(2*pi)),
axes=FALSE,
color.palette=viridis::mako,
asp=1)
filled.contour(cos(r^2)*exp(-r/(2*pi)),
axes=FALSE,
color.palette=viridis::plasma,
asp=1)
filled.contour(cos(r^2)*exp(-r/(2*pi)),
axes=FALSE,
color.palette=heat.colors,
asp=1)
filled.contour(cos(r^2)*exp(-r/(2*pi)),
axes=FALSE,
color.palette=topo.colors,
asp=1)
filled.contour(cos(r^2)*exp(-r/(2*pi)),
axes=FALSE,
color.palette=terrain.colors,
asp=1)
filled.contour(cos(r^2)*exp(-r/(2*pi)),
axes=FALSE,
color.palette=mako,
asp=1)
filled.contour(cos(r^2)*exp(-r/(2*pi)),
axes=FALSE,
color.palette=virdis::mako,
asp=1)
filled.contour(cos(r^2)*exp(-r/(2*pi)),
axes=FALSE,
color.palette=viridis::mako,
asp=1)
filled.contour(cos(r^2)*exp(-r/(2*pi)),
axes=FALSE,
color.palette=terrain.colors,
asp=1)
datos <- readxl::read_excel("~/Descargas/datos.xlsx")
datos
modelo <- lm(datos$porc_gap ~ datos$porc_impatiens, data = datos)
plot(datos$porc_gap, datos$porc_impatiens)
abline(modelo, col = "red")
summary(modelo)
names(modelo)
#graficar plot
library(tidyverse)
ggplot(datos, aes(x=porc_gap, y=porc_impatiens)) +
geom_point() +
geom_smooth(method='lm', formula=y~x, se=FALSE, col='blue') +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de Impatiens marianae") +
theme(axis.text.x = element_text(angle = 0, hjust = 1, size = 10)) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 15))
datos$transecto
sub_datos <- datos[datos$transecto %in% c("T1", "T2", "T3", "T4"),]
sub_datos
sub_datos$transecto
ggplot(sub_datos, aes(x=porc_gap, y=porc_impatiens)) +
geom_point() +
geom_smooth(method='lm', formula=y~x, se=FALSE, col='blue') +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de Impatiens marianae") +
theme(axis.text.x = element_text(angle = 0, hjust = 1, size = 10)) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 15))
ggplot(sub_datos, aes(x=porc_gap, y=porc_impatiens)) +
geom_point() +
geom_smooth(method='lm', formula=y~x, se=FALSE, col='blue') +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de Impatiens marianae") +
theme(axis.text.x = element_text(angle = 0, hjust = 1, size = 10)) +
theme_bw(base_size = 24)
names(datos)
ggplot(sub_datos, aes(x=porc_gap, y=porc_impatiens)) +
geom_point() +
geom_smooth(method='lm', formula=y~x, se=FALSE, col='blue') +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de Impatiens marianae") +
theme(axis.text.x = element_text(angle = 0, hjust = 1, size = 10)) +
theme_classic(base_size = 24)
ggplot(sub_datos, aes(x=porc_gap, y=porc_impatiens)) +
geom_point() +
geom_smooth(method='lm', formula=y~x, se=FALSE, col='blue') +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de'nImpatiens marianae") +
theme(axis.text.x = element_text(angle = 0, hjust = 1, size = 10)) +
theme_classic(base_size = 24)
ggplot(sub_datos, aes(x=porc_gap, y=porc_impatiens)) +
geom_point() +
geom_smooth(method='lm', formula=y~x, se=FALSE, col='blue') +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de\nImpatiens marianae") +
theme(axis.text.x = element_text(angle = 0, hjust = 1, size = 10)) +
theme_classic(base_size = 24)
ggplot(sub_datos, aes(x=porc_gap, y=porc_impatiens)) +
geom_point() +
geom_smooth(method='lm', formula=y~x, se=FALSE, col='blue') +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de\nImpatiens marianae") +
theme_classic(base_size = 24)
ggplot(datos, aes(x=porc_gap, y=porc_impatiens)) +
geom_point() +
geom_smooth(method='lm', formula=y~x, se=FALSE, col='blue') +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de\nImpatiens marianae") +
theme(axis.text.x = element_text(angle = 0, hjust = 1, size = 10)) +
theme_classic(base_size = 24)
sub_datos <- datos[datos$transecto %in% c("T1", "T2", "T3", "T4"),]
ggplot(sub_datos, aes(x=porc_gap, y=porc_impatiens)) +
geom_point() +
geom_smooth(method='lm', formula=y~x, se=FALSE, col='blue') +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de\nImpatiens marianae") +
theme_classic(base_size = 24)
ggplot(datos, aes(x=porc_gap, y=porc_otras)) +
geom_point() +
geom_smooth(method='lm', formula=y~x, se=FALSE, col='blue') +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de\notras especies") +
theme(axis.text.x = element_text(angle = 0, hjust = 1, size = 10)) +
theme_classic(base_size = 24)
ggplot(datos, aes(x=porc_otras, y=porc_impatiens)) +
geom_point() +
geom_smooth(method='lm', formula=y~x, se=FALSE, col='blue') +
labs(title = "",
x = "% de cobertura de\notras especies",
y = "% de cobertura de\nImpatiens marianae") +
theme(axis.text.x = element_text(angle = 0, hjust = 1, size = 10)) +
theme_classic(base_size = 24)
ggplot(datos, aes(x=porc_gap, y=porc_otras)) +
geom_point() +
geom_smooth(method='lm', formula=y~x, se=FALSE, col='blue') +
labs(x = "% de apertura de dosel",
y = "% de cobertura de\notras especies") +
theme(axis.text.x = element_text(angle = 0, hjust = 1, size = 10)) +
theme_classic(base_size = 24)
ggplot(data = datos, aes(x = porc_gap, y = y, color = porc_otras)) +
geom_point() +
facet_wrap( ~ transecto) +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de\nImpatiens marianae") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic(base_size = 24)
ggplot(data = datos, aes(x = porc_gap, y = porc_otras, color = transecto)) +
geom_point() +
facet_wrap( ~ transecto) +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de\nImpatiens marianae") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic(base_size = 24)
ggplot(data = datos, aes(x = porc_gap, y = porc_otras)) +
geom_point() +
facet_wrap( ~ transecto) +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de\nImpatiens marianae") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic(base_size = 24)
ggplot(data = datos, aes(x = porc_gap, y = porc_otras, color = transecto)) +
geom_point() +
facet_wrap( ~ transecto) +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de\nImpatiens marianae") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic(base_size = 24)
ggplot(data = datos, aes(x = porc_gap, y = porc_otras, color = transecto)) +
geom_point(show.legend = FALSE) +
facet_wrap( ~ transecto) +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de\nImpatiens marianae") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic(base_size = 24)
ggplot(data = datos, aes(x = porc_gap, y = porc_otras, color = transecto)) +
geom_point() +
facet_wrap( ~ transecto, show.legend = FALSE) +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de\nImpatiens marianae") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic(base_size = 24)
ggplot(data = datos, aes(x = porc_gap, y = porc_otras, color = transecto), show.legend = FALSE) +
geom_point() +
facet_wrap( ~ transecto) +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de\nImpatiens marianae") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic(base_size = 24)
ggplot(data = datos, aes(x = porc_gap, y = porc_otras, color = transecto)) +
geom_point() +
facet_wrap( ~ transecto) +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de\nImpatiens marianae") +
geom_smooth(method = "lm", se = FALSE) +
theme(guide_none()) +
theme_classic(base_size = 24)
ggplot(data = datos, aes(x = porc_gap, y = porc_otras, color = transecto)) +
geom_point() +
facet_wrap( ~ transecto) +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de\nImpatiens marianae") +
geom_smooth(method = "lm", se = FALSE) +
guides(fill = FALSE) +
theme_classic(base_size = 24)
ggplot(data = datos, aes(x = porc_gap, y = porc_otras, color = transecto)) +
geom_point() +
facet_wrap( ~ transecto) +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de\nImpatiens marianae") +
geom_smooth(method = "lm", se = FALSE) +
guides(fill = "none") +
theme_classic(base_size = 24)
ggplot(data = datos, aes(x = porc_gap, y = porc_otras, color = transecto)) +
geom_point() +
facet_wrap( ~ transecto) +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de\nImpatiens marianae") +
geom_smooth(method = "lm", se = FALSE) +
guides(color = "none") +
theme_classic(base_size = 24)
ggplot(data = datos, aes(x = porc_gap, y = porc_otras, color = transecto)) +
geom_point() +
facet_wrap( ~ transecto) +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de\n*Impatiens marianae*") +
geom_smooth(method = "lm", se = FALSE) +
guides(color = "none") +
theme_classic(base_size = 24)
ggplot(data = datos, aes(x = porc_gap, y = porc_otras, color = transecto)) +
geom_point() +
facet_wrap( ~ transecto) +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de\nImpatiens marianae '~italic(bacteria X)~'") +
geom_smooth(method = "lm", se = FALSE) +
guides(color = "none") +
theme_classic(base_size = 24)
ggplot(data = datos, aes(x = porc_gap, y = porc_otras, color = transecto)) +
geom_point() +
facet_wrap( ~ transecto) +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de\nImpatiens marianae") +
geom_smooth(method = "lm", se = FALSE) +
guides(color = "none") +
theme_classic(base_size = 24)
ggplot(data = datos, aes(x = porc_gap, y = porc_impatiens, color = transecto)) +
geom_point() +
facet_wrap( ~ transecto) +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de\nImpatiens marianae") +
geom_smooth(method = "lm", se = FALSE) +
guides(color = "none") +
theme_classic(base_size = 24)
ggplot(data = sub_datos, aes(x = porc_gap, y = porc_impatiens, color = transecto)) +
geom_point() +
facet_wrap( ~ transecto) +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de\nImpatiens mvarianae") +
geom_smooth(method = "lm", se = FALSE) +
guides(color = "none") +
theme_classic(base_size = 24)
ggplot(data = datos, aes(x = porc_gap, y = porc_impatiens, color = transecto)) +
geom_point() +
facet_wrap( ~ transecto) +
labs(title = "",
x = "% de apertura de dosel",
y = "My~bold(Partly~Bold)~and~italic(Partly~Italic)~Text") +
geom_smooth(method = "lm", se = FALSE) +
guides(color = "none") +
theme_classic(base_size = 24)
ggplot(data = datos, aes(x = porc_gap, y = porc_impatiens, color = transecto)) +
geom_point() +
facet_wrap( ~ transecto) +
labs(title = "",
x = "% de apertura de dosel",
y = expression(paste("X comes from ",italic("normal distribution")))) +
geom_smooth(method = "lm", se = FALSE) +
guides(color = "none") +
theme_classic(base_size = 24)
ggplot(data = datos, aes(x = porc_gap, y = porc_impatiens, color = transecto)) +
geom_point() +
facet_wrap( ~ transecto) +
labs(title = "",
x = "% de apertura de dosel",
y = expression(paste("% de cobertura de \n",italic("mpatiens marianae")))) +
geom_smooth(method = "lm", se = FALSE) +
guides(color = "none") +
theme_classic(base_size = 24)
ggplot(data = datos, aes(x = porc_gap, y = porc_impatiens, color = transecto)) +
geom_point() +
facet_wrap( ~ transecto) +
labs(title = "",
x = "% de apertura de dosel",
y = expression(paste("% de cobertura de ",italic("mpatiens marianae")))) +
geom_smooth(method = "lm", se = FALSE) +
guides(color = "none") +
theme_classic(base_size = 24)
ggplot(data = datos, aes(x = porc_gap, y = porc_impatiens, color = transecto)) +
geom_point() +
facet_wrap( ~ transecto) +
labs(title = "",
x = "% de apertura de dosel",
y = expression(paste("% de cobertura de", italic("\nmpatiens marianae")))) +
geom_smooth(method = "lm", se = FALSE) +
guides(color = "none") +
theme_classic(base_size = 24)
ggplot(data = datos, aes(x = porc_gap, y = porc_impatiens, color = transecto)) +
geom_point() +
facet_wrap( ~ transecto) +
labs(title = "",
x = "% de apertura de dosel",
y = expression(paste("% de cobertura de", italic("\nImpatiens marianae")))) +
geom_smooth(method = "lm", se = FALSE) +
guides(color = "none") +
theme_classic(base_size = 24)
ggplot(data = datos, aes(x = porc_gap, y = porc_impatiens, color = transecto)) +
geom_point() +
facet_wrap( ~ transecto) +
labs(title = "",
x = "% de apertura de dosel",
y = expression(paste("% de ", italic("\nImpatiens marianae")))) +
geom_smooth(method = "lm", se = FALSE) +
guides(color = "none") +
theme_classic(base_size = 24)
ggplot(data = sub_datos, aes(x = porc_gap, y = porc_impatiens, color = transecto)) +
geom_point() +
facet_wrap( ~ transecto) +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de\nImpatiens mvarianae") +
geom_smooth(method = "lm", se = FALSE) +
guides(color = "none") +
theme_classic(base_size = 24)
llibrary(lmer)
library(lmer)
library(lme4)
mix_eff_mod <- lmer(formula = porc_impatiens ~ porc_gap + (1 | transecto), data = dagtos)
mix_eff_mod <- lmer(formula = porc_impatiens ~ porc_gap + (1 | transecto), data = datos)
summary(mix_eff_mod)
library(lmerTest)
summary(mix_eff_mod)
mix_eff_mod <- lmer(formula = porc_impatiens ~ porc_gap + (1 | transecto), data = datos)
summary(mix_eff_mod)
mix_eff_mod <- lmer(formula = porc_impatiens ~ porc_gap + (1 | transecto), data = sub_datos)
summary(mix_eff_mod)
# modelo linear mixto con "transecto" como efecto aleatorio
mix_eff_mod2 <- lmer(formula = porc_impatiens ~ porc_otras + (1 | transecto), data = datos)
summary(mix_eff_mod2)
# modelo linear mixto con "transecto" como efecto aleatorio
mix_eff_mod2 <- lmer(formula = porc_impatiens ~ porc_otras + (1 | transecto), data = sub_datos)
summary(mix_eff_mod2)
ggplot(data = sub_datos, aes(x = porc_gap, y = porc_impatiens, color = transecto)) +
geom_point() +
facet_wrap( ~ transecto) +
labs(title = "",
x = "% de apertura de dosel",
y = "% de cobertura de\nImpatiens marianae") +
geom_smooth(method = "lm", se = FALSE) +
guides(color = "none") +
theme_classic(base_size = 24)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./PhenotypeSpace/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/PhenotypeSpace/PhenotypeSpace", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
