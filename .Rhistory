data("example_space")
# plot data
xs <- tapply(example_space$dimension_1, example_space$group, mean)
ys <- tapply(example_space$dimension_2, example_space$group, mean)
plot(example_space[, c("dimension_1", "dimension_2")], col = example_space$color, pch = 20, cex = 1.8)
text(xs, ys, labels = names(xs), cex = 2.5)
space_size(
X = example_space,
dimensions =  c("dimension_1", "dimension_2"),
group = "group",
type = "mcp"
)
space_size(
formula = group ~ dimension_1 + dimension_2,
data = example_space,
group = "group",
type = "mcp"
)
source("~/Dropbox/R_package_testing/PhenotypeSpace/R/space_size.R")
space_size(
formula = group ~ dimension_1 + dimension_2,
data = example_space,
group = "group",
type = "mcp"
)
space_size(
formula = group ~ dimension_1 + dimension_2,
data = example_space,
group = "group",
type = "mcp"
)
space_size(
X = example_space,
dimensions =  c("dimension_1", "dimension_2"),
group = "group",
type = "mst"
)
space_size(
formula = group ~ dimension_1 + dimension_2,
data = example_space,
type = "mst"
)
space_size(
formula = group ~ dimension_1 + dimension_2,
data = example_space,
group = "group",
type = "mcp"
)
space_size(
formula = group ~ dimension_1 + dimension_2,
data = example_space,
type = "mst"
)
space_size(
formula = group ~ dimension_1 + dimension_2,
data = example_space,
group = "group",
method = "mcp"
)
space_size(
formula = group ~ dimension_1 + dimension_2,
data = example_space,
method = "mst"
)
source("~/Dropbox/R_package_testing/PhenotypeSpace/R/rarefact_space_size.R")
FUN <- "rarefact_space_similarity"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
#remove images and sound files
rm.sf()
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
data("example_space")
# plot data
xs <- tapply(example_space$dimension_1, example_space$group, mean)
ys <- tapply(example_space$dimension_2, example_space$group, mean)
plot(example_space[, c("dimension_1", "dimension_2")], col = example_space$color, pch = 20, cex = 1.8)
text(xs, ys, labels = names(xs), cex = 2.5)
rarefact_space_similarity(
formula = group ~ dimension_1 + dimension_2,
data = example_space,
method = "proportional.overlap",
parallel = 1,
iterations = 4)
FUN <- "rarefact_space_size"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
#remove images and sound files
rm.sf()
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
data("example_space")
# plot data
xs <- tapply(example_space$dimension_1, example_space$group, mean)
ys <- tapply(example_space$dimension_2, example_space$group, mean)
plot(example_space[, c("dimension_1", "dimension_2")], col = example_space$color, pch = 20, cex = 1.8)
text(xs, ys, labels = names(xs), cex = 2.5)
# mcp
space_size(
X = example_space,
dimensions =  c("dimension_1", "dimension_2"),
group = "group",
type = "mcp",
parallel = 1
)
# mcp
space_size(
formula = group ~ dimension_1 + dimension_2,
data = example_space,
method = "mcp",
parallel = 1
)
# rarefacted
rarefact_space_size(
formula = group ~ dimension_1 + dimension_2,
data = example_space,
method = "mcp",
parallel = 1
)
source("~/Dropbox/R_package_testing/PhenotypeSpace/R/rarefact_space_size.R")
# rarefacted
rarefact_space_size(
formula = group ~ dimension_1 + dimension_2,
data = example_space,
method = "mcp",
parallel = 1
)
source("~/Dropbox/R_package_testing/PhenotypeSpace/R/rarefact_space_size.R")
# rarefacted
rarefact_space_size(
formula = group ~ dimension_1 + dimension_2,
data = example_space,
method = "mcp",
parallel = 1
)
source("~/Dropbox/R_package_testing/PhenotypeSpace/R/rarefact_space_size.R")
# rarefacted
rarefact_space_size(
formula = group ~ dimension_1 + dimension_2,
data = example_space,
method = "mcp",
parallel = 1
)
# mcp
space_size(
formula = group ~ dimension_1 + dimension_2,
data = example_space,
method = "mcp",
parallel = 1
)
# rarefacted
rarefact_space_size(
formula = group ~ dimension_1 + dimension_2,
data = example_space,
method = "mcp",
parallel = 1
)
source("~/Dropbox/R_package_testing/PhenotypeSpace/R/space_size_difference.R")
FUN <- "rarefact_space_size_difference"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
#remove images and sound files
rm.sf()
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
data("example_space")
# plot data
xs <- tapply(example_space$dimension_1, example_space$group, mean)
ys <- tapply(example_space$dimension_2, example_space$group, mean)
plot(example_space[, c("dimension_1", "dimension_2")], col = example_space$color, pch = 20, cex = 1.8)
text(xs, ys, labels = names(xs), cex = 2.5)
(ssd <- space_size_difference(
X = example_space,
dimensions =  c("dimension_1", "dimension_2"),
group = "group"))
(ssd <- space_size_difference(
data = example_space
rarefact_space_size_difference(
(ssd <- space_size_difference(
formula = group ~ dimension_1 + dimension_2,
data = example_space
))
source("~/Dropbox/R_package_testing/PhenotypeSpace/R/space_size_difference.R")
source("~/Dropbox/R_package_testing/PhenotypeSpace/R/space_size_difference.R")
(ssd <- space_size_difference(
formula = group ~ dimension_1 + dimension_2,
data = example_space
))
rarefact_space_size_difference(
formula = group ~ dimension_1 + dimension_2,
data = example_space
iterations = 5)
rarefact_space_size_difference(
formula = group ~ dimension_1 + dimension_2,
data = example_space,
iterations = 5)
source("~/Dropbox/R_package_testing/PhenotypeSpace/R/rarefact_space_similarity.R")
source("~/Dropbox/R_package_testing/PhenotypeSpace/R/space_size_difference.R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./PhenotypeSpace/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/PhenotypeSpace/PhenotypeSpace", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./PhenotypeSpace/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/PhenotypeSpace/PhenotypeSpace", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
data("example_space")
# get rarefacted MCP space size
# (try with more iterations on your own data)
rarefact_space_size(
formula = group ~ dimension_1 + dimension_2,
data = sub_data,
method = "mcp")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./PhenotypeSpace/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/PhenotypeSpace/PhenotypeSpace", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
source("~/Dropbox/R_package_testing/PhenotypeSpace/R/rarefact_space_size_difference.R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./PhenotypeSpace/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/PhenotypeSpace/PhenotypeSpace", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
source("~/Dropbox/R_package_testing/PhenotypeSpace/R/rarefact_space_size_difference.R")
mcp_size_diff <- rarefact_space_size_difference(
formula = group ~ dimension_1 + dimension_2,
data = example_space,
method = "mcp",
iterations = 5)
source("~/Dropbox/R_package_testing/PhenotypeSpace/R/rarefact_space_size_difference.R")
mcp_size_diff <- rarefact_space_size_difference(
formula = group ~ dimension_1 + dimension_2,
data = example_space,
method = "mcp",
iterations = 5)
mcp_size_diff
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./PhenotypeSpace/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/PhenotypeSpace/PhenotypeSpace", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
source("~/Dropbox/R_package_testing/PhenotypeSpace/R/space_size.R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./PhenotypeSpace/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/PhenotypeSpace/PhenotypeSpace", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./PhenotypeSpace/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/PhenotypeSpace/PhenotypeSpace", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
FUN <- "binary_triangular_matrix"
#run function
source(file.path("./R", paste0(FUN,".R")))
# setwd(tempdir())
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
#remove images and sound files
rm.sf()
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
data("example_space")
# create 3 groups each one with 2 observations
groups <- paste0("G", rep(1:3, each = 2))
# create binary matrix
binary_triangular_matrix(group = groups)
# create binary matrix using labels
binary_triangular_matrix(group = groups, labels = paste(groups, 1:6, sep = "-"))
FUN <- "distance_to_rectangular"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
#remove images and sound files
rm.sf()
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
data("example_space")
dist_example <- dist(example_space[example_space$group %in% c("G1", "G2"), c("dimension_1", "dimension_2")])
rect_example <- distance_to_rectangular(distance.matrix = dist_example, metric = TRUE)
head(rect_example)
rect_example <- distance_to_rectangular(distance.matrix = dist_example, metric = FALSE, maxit = 3)
head(rect_example)
FUN <- "plot_space"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
#remove images and sound files
rm.sf()
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
data("example_space")
# no background
plot_space(X = example_space, dimensions = c("dimension_1", "dimension_2"), indices = which(example_space$group == "G3"), colors = viridis(10)[7])
# add background
plot_space(X = example_space, dimensions = c("dimension_1", "dimension_2"), indices = which(example_space$group == "G2"), background.indices = which(example_space$group %in% c("G3", "G")))
# change legend labels
plot_space(X = example_space, dimensions = c("dimension_1", "dimension_2"), indices = which(example_space$group == "G2"), background.indices = which(example_space$group != "G2"), labels = c("G3", "trait space"))
# change legend position
plot_space(X = example_space, dimensions = c("dimension_1", "dimension_2"), indices = which(example_space$group == "G2"), background.indices = which(example_space$group != "G2"), labels = c("G3", "trait space"), legend.pos = "left")
# with title
plot_space(X = example_space, dimensions = c("dimension_1", "dimension_2"), indices = which(example_space$group == "G2"), background.indices = which(example_space$group != "G2"), labels = c("G3", "trait space"), legend.pos = "bottomleft", title = "G3")
FUN <- "rarefact_space_size"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
#remove images and sound files
rm.sf()
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
data("example_space")
# plot data
xs <- tapply(example_space$dimension_1, example_space$group, mean)
ys <- tapply(example_space$dimension_2, example_space$group, mean)
plot(example_space[, c("dimension_1", "dimension_2")], col = example_space$color, pch = 20, cex = 1.8)
text(xs, ys, labels = names(xs), cex = 2.5)
# mcp
space_size(
formula = group ~ dimension_1 + dimension_2,
data = example_space,
method = "mcp",
parallel = 1
)
# rarefacted
rarefact_space_size(
formula = group ~ dimension_1 + dimension_2,
data = example_space,
method = "mcp",
parallel = 1
)
# mst
space_size(
X = example_space,
dimensions =  c("dimension_1", "dimension_2"),
group = "group",
method = "mst"
)
# mst
space_size(
formula = group ~ dimension_1 + dimension_2,
data = example_space,
method = "mst"
)
# mst rarefacted
rarefact_space_size(
formula = group ~ dimension_1 + dimension_2,
data = example_space,
method = "mst",
parallel = 1
)
# mst rarefacted parallel proportional
rarefact_space_size(
formula = group ~ dimension_1 + dimension_2,
data = example_space,
method = "mst",
parallel = 3,
proportional = TRUE
)
# mst rarefacted parallel proportional
rarefact_space_size(
formula = group ~ dimension_1 + dimension_2,
data = example_space,
method = "mst",
parallel = 3,
proportional = TRUE,
min.n = 2
)
# mst
space_size(
formula = group ~ dimension_1 + dimension_2,
data = example_space,
method = "density"
)
# mst rarefacted
rarefact_space_size(
formula = group ~ dimension_1 + dimension_2,
data = example_space,
method = "density",
parallel = 1
)
reticulate::repl_python()
reticulate::source_python('~/Downloads/clip30.py')
reticulate::repl_python()
reticulate::source_python('~/Downloads/clip30.py')
reticulate::repl_python()
# devtools::install()
x <- c("devtools", "pbapply", "pkgdown","adehabitatHR", "sp", "raster", "MASS", "warbleR", "vegan", "caret")
aa <- lapply(x, function(y){
if(!y %in% installed.packages()[,"Package"])  {if(y != "warbleR") install.packages(y) else devtools::install_github("maRce10/warbleR")
}
try(require(y, character.only = T), silent = T)
})
rm(list = ls())
load_all()
install.packages("~/Downloads/spatstat.core_2.4-4.tar.gz", repos = NULL, type = "source")
devtools::install()
library(spatstat.core)
devtools::install()
devtools::install()
devtools::load_all(".")
library(spatstat.core)
devtools::load_all(".")
devtools::install()
spatstat.core::integral()
spatstat.core::integral.ssf()
devtools::install(force = T)
library(rgeos)
library(spatstat.core)
